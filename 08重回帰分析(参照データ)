#参照 "http://data-naly.hatenablog.com/entry/2018/04/22/044115"

devtools::install_github('jaredlander/coefplot')
install.packages("GGally")
install.packages("dplyr")
install.packages("corrplot")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("caret")

library(MASS)

# ボストンのデータをロード
data(Boston)

# 重回帰分析の実行
lm.Boston <- lm(medv ~ ., data = Boston)
# 分析結果の要約
summary(lm.Boston)

# 回帰係数の表示
coef(summary(lm.Boston))

#説明変数が多い時には見づらいのでグラフ化
library(coefplot)
coefplot(lm.Boston)

#上記の例は全ての変数を使用して重回帰分析
#step関数を用いると、目的変数に対する説明力が低い変数を削除して回帰
lm.Boston.step <- step(lm.Boston)

#変数選択をした後の回帰式をsummary関数で要約
summary(lm.Boston.step)

#---------------------------------------------------------------------
#重回帰分析する前に各変数の相関関係などを把握しておくべき
#相関係数
library(dplyr)
cor.Boston <- Boston %>% cor
cor.Boston

#算出した相関係数を可視化
library(corrplot)
corrplot(Boston %>% cor, addConf.col = TRUE)

#分散拡大要因のヒートマップ
library(tidyr)
library(ggplot2)
  # 分散拡大要因の算出
vif <- 1/(1 - (Boston %>% dplyr:::select(-medv) %>% cor)^2)
  # 縦長形式への変換
vif.l <- vif %>%
  as.data.frame %>%
  mutate(item1 = rownames(.)) %>%
  gather(item2, vif, -item1)
p <- ggplot(data = vif.l, aes(x = item1, y = item2, fill = vif)) +
  geom_tile() + geom_text(label = sprintf("%.2f", vif)) +
  scale_fill_gradient(low = "white", high = "red")
print(p)
